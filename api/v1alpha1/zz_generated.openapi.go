//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/redhat-cop/group-sync-operator/api/v1alpha1.AzureProvider":    schema_redhat_cop_group_sync_operator_api_v1alpha1_AzureProvider(ref),
		"github.com/redhat-cop/group-sync-operator/api/v1alpha1.GitHubProvider":   schema_redhat_cop_group_sync_operator_api_v1alpha1_GitHubProvider(ref),
		"github.com/redhat-cop/group-sync-operator/api/v1alpha1.GitLabProvider":   schema_redhat_cop_group_sync_operator_api_v1alpha1_GitLabProvider(ref),
		"github.com/redhat-cop/group-sync-operator/api/v1alpha1.GroupSync":        schema_redhat_cop_group_sync_operator_api_v1alpha1_GroupSync(ref),
		"github.com/redhat-cop/group-sync-operator/api/v1alpha1.GroupSyncList":    schema_redhat_cop_group_sync_operator_api_v1alpha1_GroupSyncList(ref),
		"github.com/redhat-cop/group-sync-operator/api/v1alpha1.GroupSyncSpec":    schema_redhat_cop_group_sync_operator_api_v1alpha1_GroupSyncSpec(ref),
		"github.com/redhat-cop/group-sync-operator/api/v1alpha1.GroupSyncStatus":  schema_redhat_cop_group_sync_operator_api_v1alpha1_GroupSyncStatus(ref),
		"github.com/redhat-cop/group-sync-operator/api/v1alpha1.KeycloakProvider": schema_redhat_cop_group_sync_operator_api_v1alpha1_KeycloakProvider(ref),
		"github.com/redhat-cop/group-sync-operator/api/v1alpha1.LdapProvider":     schema_redhat_cop_group_sync_operator_api_v1alpha1_LdapProvider(ref),
		"github.com/redhat-cop/group-sync-operator/api/v1alpha1.OktaProvider":     schema_redhat_cop_group_sync_operator_api_v1alpha1_OktaProvider(ref),
		"github.com/redhat-cop/group-sync-operator/api/v1alpha1.Provider":         schema_redhat_cop_group_sync_operator_api_v1alpha1_Provider(ref),
		"github.com/redhat-cop/group-sync-operator/api/v1alpha1.ProviderType":     schema_redhat_cop_group_sync_operator_api_v1alpha1_ProviderType(ref),
		"github.com/redhat-cop/group-sync-operator/api/v1alpha1.SecretRef":        schema_redhat_cop_group_sync_operator_api_v1alpha1_SecretRef(ref),
	}
}

func schema_redhat_cop_group_sync_operator_api_v1alpha1_AzureProvider(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AzureProvider represents integration with Azure",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"baseGroups": {
						SchemaProps: spec.SchemaProps{
							Description: "BaseGroups allows for a set of groups to be specified to start searching from instead of searching all groups in the directory",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"credentialsSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "CredentialsSecret is a reference to a secret containing authentication details for communicating to Azure",
							Ref:         ref("github.com/redhat-cop/group-sync-operator/api/v1alpha1.SecretRef"),
						},
					},
					"filter": {
						SchemaProps: spec.SchemaProps{
							Description: "Filter allows for limiting the results from the groups response using the Filter feature of the Azure Graph API",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"insecure": {
						SchemaProps: spec.SchemaProps{
							Description: "Insecure specifies whether to allow for unverified certificates to be used when communicating to Azure",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"groups": {
						SchemaProps: spec.SchemaProps{
							Description: "Groups represents a filtered list of groups to synchronize",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "URL is the location of the Azure platform",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"userNameAttributes": {
						SchemaProps: spec.SchemaProps{
							Description: "UserNameAttributes are the fields to consider on the User object containing the username",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"credentialsSecret"},
			},
		},
		Dependencies: []string{
			"github.com/redhat-cop/group-sync-operator/api/v1alpha1.SecretRef"},
	}
}

func schema_redhat_cop_group_sync_operator_api_v1alpha1_GitHubProvider(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GitHubProvider represents integration with GitHub",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"caSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "CaSecret is a reference to a secret containing a CA certificate to communicate to the GitHub server",
							Ref:         ref("github.com/redhat-cop/group-sync-operator/api/v1alpha1.SecretRef"),
						},
					},
					"credentialsSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "CredentialsSecret is a reference to a secret containing authentication details for the GitHub server",
							Ref:         ref("github.com/redhat-cop/group-sync-operator/api/v1alpha1.SecretRef"),
						},
					},
					"insecure": {
						SchemaProps: spec.SchemaProps{
							Description: "Insecure specifies whether to allow for unverified certificates to be used when communicating to GitHab",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"organization": {
						SchemaProps: spec.SchemaProps{
							Description: "Organization represents the location to source teams to synchronize",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"teams": {
						SchemaProps: spec.SchemaProps{
							Description: "Teams represents a filtered list of teams to synchronize",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "URL is the location of the GitHub server",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"credentialsSecret"},
			},
		},
		Dependencies: []string{
			"github.com/redhat-cop/group-sync-operator/api/v1alpha1.SecretRef"},
	}
}

func schema_redhat_cop_group_sync_operator_api_v1alpha1_GitLabProvider(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GitLabProvider represents integration with GitLab",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"caSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "CaSecret is a reference to a secret containing a CA certificate to communicate to the GitLab server",
							Ref:         ref("github.com/redhat-cop/group-sync-operator/api/v1alpha1.SecretRef"),
						},
					},
					"credentialsSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "CredentialsSecret is a reference to a secret containing authentication details for the GitLab server",
							Ref:         ref("github.com/redhat-cop/group-sync-operator/api/v1alpha1.SecretRef"),
						},
					},
					"insecure": {
						SchemaProps: spec.SchemaProps{
							Description: "Insecure specifies whether to allow for unverified certificates to be used when communicating to GitLab",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"groups": {
						SchemaProps: spec.SchemaProps{
							Description: "Groups represents a filtered list of groups to synchronize",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "URL is the location of the GitLub server",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"credentialsSecret"},
			},
		},
		Dependencies: []string{
			"github.com/redhat-cop/group-sync-operator/api/v1alpha1.SecretRef"},
	}
}

func schema_redhat_cop_group_sync_operator_api_v1alpha1_GroupSync(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GroupSync is the Schema for the groupsyncs API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/redhat-cop/group-sync-operator/api/v1alpha1.GroupSyncSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/redhat-cop/group-sync-operator/api/v1alpha1.GroupSyncStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/redhat-cop/group-sync-operator/api/v1alpha1.GroupSyncSpec", "github.com/redhat-cop/group-sync-operator/api/v1alpha1.GroupSyncStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_redhat_cop_group_sync_operator_api_v1alpha1_GroupSyncList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GroupSyncList contains a list of GroupSync",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/redhat-cop/group-sync-operator/api/v1alpha1.GroupSync"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/redhat-cop/group-sync-operator/api/v1alpha1.GroupSync", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_redhat_cop_group_sync_operator_api_v1alpha1_GroupSyncSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GroupSyncSpec defines the desired state of GroupSync",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"providers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge,retainKeys",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of Providers that can be mounted by containers belonging to the pod.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/redhat-cop/group-sync-operator/api/v1alpha1.Provider"),
									},
								},
							},
						},
					},
					"schedule": {
						SchemaProps: spec.SchemaProps{
							Description: "Schedule represents a cron based configuration for synchronization",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/redhat-cop/group-sync-operator/api/v1alpha1.Provider"},
	}
}

func schema_redhat_cop_group_sync_operator_api_v1alpha1_GroupSyncStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GroupSyncStatus defines the observed state of GroupSync",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Condition"),
									},
								},
							},
						},
					},
					"lastSyncSuccessTime": {
						SchemaProps: spec.SchemaProps{
							Description: "LastSyncSuccessTime represents the time last synchronization completed successfully",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Condition", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_redhat_cop_group_sync_operator_api_v1alpha1_KeycloakProvider(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KeycloakProvider represents integration with Keycloak",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"caSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "CaSecret is a reference to a secret containing a CA certificate to communicate to the Keycloak server",
							Ref:         ref("github.com/redhat-cop/group-sync-operator/api/v1alpha1.SecretRef"),
						},
					},
					"credentialsSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "CredentialsSecret is a reference to a secret containing authentication details for the Keycloak server",
							Ref:         ref("github.com/redhat-cop/group-sync-operator/api/v1alpha1.SecretRef"),
						},
					},
					"groups": {
						SchemaProps: spec.SchemaProps{
							Description: "Groups represents a filtered list of groups to synchronize",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"insecure": {
						SchemaProps: spec.SchemaProps{
							Description: "Insecure specifies whether to allow for unverified certificates to be used when communicating to Keycloak",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"loginRealm": {
						SchemaProps: spec.SchemaProps{
							Description: "LoginRealm is the Keycloak realm to authenticate against",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"realm": {
						SchemaProps: spec.SchemaProps{
							Description: "Realm is the realm containing the groups to synchronize against",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"scope": {
						SchemaProps: spec.SchemaProps{
							Description: "Scope represents the depth for which groups will be synchronized",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "URL is the location of the Keycloak server",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"credentialsSecret", "realm", "url"},
			},
		},
		Dependencies: []string{
			"github.com/redhat-cop/group-sync-operator/api/v1alpha1.SecretRef"},
	}
}

func schema_redhat_cop_group_sync_operator_api_v1alpha1_LdapProvider(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LdapProvider represents integration with an LDAP server",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"caSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "CaSecret is a reference to a secret containing a CA certificate to communicate to the GitLab server",
							Ref:         ref("github.com/redhat-cop/group-sync-operator/api/v1alpha1.SecretRef"),
						},
					},
					"credentialsSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "CredentialsSecret is a reference to a secret containing authentication details for communicating to LDAP",
							Ref:         ref("github.com/redhat-cop/group-sync-operator/api/v1alpha1.SecretRef"),
						},
					},
					"insecure": {
						SchemaProps: spec.SchemaProps{
							Description: "Insecure specifies whether to allow for unverified certificates to be used when communicating to LDAP",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"groupUIDNameMapping": {
						SchemaProps: spec.SchemaProps{
							Description: "/ LDAPGroupUIDToOpenShiftGroupNameMapping is an optional direct mapping of LDAP group UIDs to OpenShift group names",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"rfc2307": {
						SchemaProps: spec.SchemaProps{
							Description: "RFC2307Config represents the configuration for a RFC2307 schema",
							Ref:         ref("github.com/openshift/api/legacyconfig/v1.RFC2307Config"),
						},
					},
					"activeDirectory": {
						SchemaProps: spec.SchemaProps{
							Description: "ActiveDirectoryConfig represents the configuration for Active Directory",
							Ref:         ref("github.com/openshift/api/legacyconfig/v1.ActiveDirectoryConfig"),
						},
					},
					"augmentedActiveDirectory": {
						SchemaProps: spec.SchemaProps{
							Description: "ActiveDirectoryConfig represents the configuration for Augmented Active Directory",
							Ref:         ref("github.com/openshift/api/legacyconfig/v1.AugmentedActiveDirectoryConfig"),
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "URL is the location of the LDAP Server",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"whitelist": {
						SchemaProps: spec.SchemaProps{
							Description: "Whitelist represents a list of groups to synchronize",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"blacklist": {
						SchemaProps: spec.SchemaProps{
							Description: "Blacklist represents a list of groups to not synchronize",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"groupUIDNameMapping", "url"},
			},
		},
		Dependencies: []string{
			"github.com/openshift/api/legacyconfig/v1.ActiveDirectoryConfig", "github.com/openshift/api/legacyconfig/v1.AugmentedActiveDirectoryConfig", "github.com/openshift/api/legacyconfig/v1.RFC2307Config", "github.com/redhat-cop/group-sync-operator/api/v1alpha1.SecretRef"},
	}
}

func schema_redhat_cop_group_sync_operator_api_v1alpha1_OktaProvider(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OktaProvider represents integration with Okta",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"credentialsSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "CredentialsSecret is a reference to a secret containing authentication details for the Okta server",
							Ref:         ref("github.com/redhat-cop/group-sync-operator/api/v1alpha1.SecretRef"),
						},
					},
					"groups": {
						SchemaProps: spec.SchemaProps{
							Description: "Groups represents a filtered list of groups to synchronize",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "URL is the location of the Okta domain server",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"appId": {
						SchemaProps: spec.SchemaProps{
							Description: "AppId is the id of the application we are syncing groups for",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"extractLoginUsername": {
						SchemaProps: spec.SchemaProps{
							Description: "ExtractLoginUsername is true if Okta username's are defaulted to emails and you would like the username only",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"profileKey": {
						SchemaProps: spec.SchemaProps{
							Description: "ProfileKey the attribute from Okta you would like to use as the user identifier.  Default is \"login\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"credentialsSecret", "url", "appId", "extractLoginUsername", "profileKey"},
			},
		},
		Dependencies: []string{
			"github.com/redhat-cop/group-sync-operator/api/v1alpha1.SecretRef"},
	}
}

func schema_redhat_cop_group_sync_operator_api_v1alpha1_Provider(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Provider represents the container for a single provider",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name represents the name of the provider",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_redhat_cop_group_sync_operator_api_v1alpha1_ProviderType(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProviderType represents the provider to synchronize against",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"azure": {
						SchemaProps: spec.SchemaProps{
							Description: "Azure represents the Azure provider",
							Ref:         ref("github.com/redhat-cop/group-sync-operator/api/v1alpha1.AzureProvider"),
						},
					},
					"github": {
						SchemaProps: spec.SchemaProps{
							Description: "GitHub represents the GitHub provider",
							Ref:         ref("github.com/redhat-cop/group-sync-operator/api/v1alpha1.GitHubProvider"),
						},
					},
					"gitlab": {
						SchemaProps: spec.SchemaProps{
							Description: "GitLab represents the GitLab provider",
							Ref:         ref("github.com/redhat-cop/group-sync-operator/api/v1alpha1.GitLabProvider"),
						},
					},
					"ldap": {
						SchemaProps: spec.SchemaProps{
							Description: "Ldap represents the LDAP provider",
							Ref:         ref("github.com/redhat-cop/group-sync-operator/api/v1alpha1.LdapProvider"),
						},
					},
					"keycloak": {
						SchemaProps: spec.SchemaProps{
							Description: "Keycloak represents the Keycloak provider",
							Ref:         ref("github.com/redhat-cop/group-sync-operator/api/v1alpha1.KeycloakProvider"),
						},
					},
					"okta": {
						SchemaProps: spec.SchemaProps{
							Description: "Okta represents the Okta provider",
							Ref:         ref("github.com/redhat-cop/group-sync-operator/api/v1alpha1.OktaProvider"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/redhat-cop/group-sync-operator/api/v1alpha1.AzureProvider", "github.com/redhat-cop/group-sync-operator/api/v1alpha1.GitHubProvider", "github.com/redhat-cop/group-sync-operator/api/v1alpha1.GitLabProvider", "github.com/redhat-cop/group-sync-operator/api/v1alpha1.KeycloakProvider", "github.com/redhat-cop/group-sync-operator/api/v1alpha1.LdapProvider", "github.com/redhat-cop/group-sync-operator/api/v1alpha1.OktaProvider"},
	}
}

func schema_redhat_cop_group_sync_operator_api_v1alpha1_SecretRef(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SecretRef represents a reference to an item within a Secret",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name represents the name of the secret",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace represents the namespace containing the secret",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"key": {
						SchemaProps: spec.SchemaProps{
							Description: "Key represents the specific key to reference from the secret",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "namespace"},
			},
		},
	}
}
